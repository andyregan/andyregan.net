<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: General Tips | $whois andyregan]]></title>
  <link href="http://andyregan.net/blog/categories/general-tips/atom.xml" rel="self"/>
  <link href="http://andyregan.net/"/>
  <updated>2013-01-09T17:16:18+00:00</updated>
  <id>http://andyregan.net/</id>
  <author>
    <name><![CDATA[Andrew Regan]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Creating Dovecot IMAP Folders In Mail.App]]></title>
    <link href="http://andyregan.net/creating-dovecot-imap-folders-in-mail-app/"/>
    <updated>2011-02-06T00:00:00+00:00</updated>
    <id>http://andyregan.net/creating-dovecot-imap-folders-in-mail-app</id>
    <content type="html"><![CDATA[<p>If you want to organise your Dovecot IMAP mailboxes into folders, it may seem intuitive to
just drag the them into a new mailbox. However, you may get the error message <strong>Target
mailbox doesn't allow inferior mailboxes</strong>.</p>

<p>The solution is to explicitly create a folder, by adding a <code>/</code> to the end of the name you
give a new mailbox. Folders can contain other folders and mailboxes, whereas mailboxes
can only contain mail.</p>

<p>For example, in Mail.app go to <strong>Mailbox</strong> -> <strong>New Mailbox</strong> . Select where you want to
create the new folder and enter a name with a <code>/</code> at the end. If you don't include the
<code>/</code>, a new mailbox will be created.</p>

<p><a href="/images/posts/creating-dovecot-imap-folders-in-mail-app/Screen-shot-2011-02-06-at-17.07.53.png"><img class="center" src="/images/posts/creating-dovecot-imap-folders-in-mail-app/Screen-shot-2011-02-06-at-17.07.53.png" title="'Screenshot of Mail.app'" ></a></p>

<p>In the image below, you can see a folder called <strong>TEST</strong> that contains a sub-folder
called <strong>TEST2</strong> and a mailbox called <strong>test</strong>.</p>

<p><a href="/images/posts/creating-dovecot-imap-folders-in-mail-app/Screen-shot-2011-02-06-at-17.08.24.png"><img class="center" src="/images/posts/creating-dovecot-imap-folders-in-mail-app/Screen-shot-2011-02-06-at-17.08.24.png" title="'Screen shot of Mail.app'" ></a></p>

<p>While the above example uses Mail.app, you'll also need to add a <code>/</code> to the end of
Dovecot IMAP folder names in other clients such as Mozilla Thunderbird.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Renaming Many Files At Once with Pattern Matching in Bash]]></title>
    <link href="http://andyregan.net/renaming-many-files-at-once-with-pattern-matching-in-bash/"/>
    <updated>2010-11-25T00:00:00+00:00</updated>
    <id>http://andyregan.net/renaming-many-files-at-once-with-pattern-matching-in-bash</id>
    <content type="html"><![CDATA[<p>Sometimes you may need to rename many files at once in a similar way, such as removing a
specific string from their name. Rather than manually rename the files, you can use a method
described at <a href="http://snipplr.com/view/3648/batch-file-rename-with-awk-and-sed/">snipplr.com</a>. One of the advantages of this method is that you can preview
the changes you will make simply by omitting the final pipe to <code>/bin/bash</code> .</p>

<p>Let's say you have a bunch of files which contain patterns you would like to remove. In the
following example, you might need to remove the string <strong>PatternOne.</strong> and <strong>PatternTwo.</strong>
from each file's name.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>ls -1 /path/to/files/
</span><span class='line'>PatternOne.001.PatternTwo.avi
</span><span class='line'>PatternOne.002.PatternTwo.avi
</span><span class='line'>PatternOne.003.PatternTwo.avi
</span><span class='line'>PatternOne.004.PatternTwo.avi
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The first step is to use <code>awk</code> to create a serious of <code>mv</code> statements.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>ls *.avi | awk <span class="s1">&#39;{print(&quot;mv &quot;$1&quot; &quot;$1)}&#39;</span>
</span><span class='line'>mv PatternOne.001.PatternTwo.avi PatternOne.001.PatternTwo.avi
</span><span class='line'>mv PatternOne.002.PatternTwo.avi PatternOne.002.PatternTwo.avi
</span><span class='line'>mv PatternOne.003.PatternTwo.avi PatternOne.003.PatternTwo.avi
</span><span class='line'>mv PatternOne.004.PatternTwo.avi PatternOne.004.PatternTwo.avi
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Next, we pipe the <code>mv</code> statements to a <code>sed</code> command which removes <strong>PatternOne.</strong> from
the <code>mv</code> statement's destination file.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>ls *.avi | awk <span class="s1">&#39;{print(&quot;mv &quot;$1&quot; &quot;$1)}&#39;</span> | sed <span class="s1">&#39;s/PatternOne.//2&#39;</span>
</span><span class='line'>mv PatternOne.001.PatternTwo.avi 001.PatternTwo.avi
</span><span class='line'>mv PatternOne.002.PatternTwo.avi 002.PatternTwo.avi
</span><span class='line'>mv PatternOne.003.PatternTwo.avi 003.PatternTwo.avi
</span><span class='line'>mv PatternOne.004.PatternTwo.avi 004.PatternTwo.avi
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Add another <code>sed</code> statement to remove <strong>PatternTwo.</strong></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>ls *.avi | awk <span class="s1">&#39;{print(&quot;mv &quot;$1&quot; &quot;$1)}&#39;</span> | sed <span class="s1">&#39;s/PatternOne.//2&#39;</span>| sed <span class="s1">&#39;s/PatternTwo.//2&#39;</span>
</span><span class='line'>mv PatternOne.001.PatternTwo.avi 001.avi
</span><span class='line'>mv PatternOne.002.PatternTwo.avi 002.avi
</span><span class='line'>mv PatternOne.003.PatternTwo.avi 003.avi
</span><span class='line'>mv PatternOne.004.PatternTwo.avi 004.avi
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Finally, pipe the result to <code>/bin/sh</code> so that the <code>mv</code> statements are run.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>ls *.avi | awk <span class="s1">&#39;{print(&quot;mv &quot;$1&quot; &quot;$1)}&#39;</span> | sed <span class="s1">&#39;s/PatternOne.//2&#39;</span>| sed <span class="s1">&#39;s/PatternTwo.//2&#39;</span> | /bin/sh
</span></code></pre></td></tr></table></div></figure></notextile></div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Quickly Reset Linux File and Directory Permissions]]></title>
    <link href="http://andyregan.net/quickly-reset-linux-file-and-directory-permissions/"/>
    <updated>2010-02-25T00:00:00+00:00</updated>
    <id>http://andyregan.net/quickly-reset-linux-file-and-directory-permissions</id>
    <content type="html"><![CDATA[<h2>Reset File Permissions</h2>

<p>Just a quick post so I can keep these commands handy (since I keep forgetting them). These will allow you to quickly set
different <a href="http://www.linuxquestions.org/linux/answers/Security/Quick_and_Dirty_Guide_to_Linux_File_Permissions">permissions</a> for all files (or all folders) within a specific directory in Linux.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>reset files </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>find /path/to/directory/ -type f -exec chmod 644 <span class="o">{}</span> <span class="se">\;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>Reset Directory Permissions</h2>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>reset directories </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>find /path/to/directory/ -type d -exec chmod 755 <span class="o">{}</span> <span class="se">\;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>Reset Permissions on 777 PHP Files Only</h2>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>reset 777 php files </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>find /path/to/directory/ -name *.php -perm 777 -type f -exec chmod 644 <span class="o">{}</span> <span class="se">\;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[First Post and SMS Ping Script]]></title>
    <link href="http://andyregan.net/first-post-and-first-script-foo/"/>
    <updated>2009-02-22T00:00:00+00:00</updated>
    <id>http://andyregan.net/first-post-and-first-script-foo</id>
    <content type="html"><![CDATA[<p>Thanks for visiting! The main purpose of this blog (right now) is as an archive for useful technical bits and pieces I've come across and don't want to forget. Hopefully, you might find some of these useful, too. This is my first post and I'd like to start by sharing a handy little script-foo I learned.</p>

<p>Over Christmas, the Compsoc admin team reinstalled our backup server. We created a fairly large (~3.6T RAID5) /home partition which took forever to build when the server booted for the first time. Rather than keep checking into the server room I figured "Wouldn't it be handy if I could just get a text when the server comes up?".</p>

<p>I decided to use a great tool called <a title="o2sms" href="http://o2sms.sourceforge.net/" target="_self">o2sms</a> by <a title="mackers" href="http://www.mackers.com/" target="_self">Mackers</a> that's installed on Compsoc's webserver. It allows you to send text messages via the command line. The following script intermittently pings the backup and sends an SMS to the specified number when a ping returns successfully:</p>

<p><code>$while ! ping -W 1 -c 1 &lt;IPAddress&gt; 2&gt;&amp;1 &gt;/dev/null; do true; done &amp;&amp; echo "Scorpio is UP" | meteorsms &lt;mynumber&gt;</code></p>

<p>Its a simple little diddy ain't it? Run it in a screen and you can detach, logout and go about your day. Drop the <strong>!</strong> and it will send an SMS if a ping fails (maybe the servers down). You could also replace ping with another event, such as a certain user logging in (users | grep andrewjregan) or if you recieve a new mail.</p>
]]></content>
  </entry>
  
</feed>

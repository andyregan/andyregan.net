<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Linux | $whois andyregan]]></title>
  <link href="http://andyregan.net/blog/categories/linux/atom.xml" rel="self"/>
  <link href="http://andyregan.net/"/>
  <updated>2013-01-09T16:32:11+00:00</updated>
  <id>http://andyregan.net/</id>
  <author>
    <name><![CDATA[Andrew Regan]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Firewalling Bridged VMs Using Libvirt&#8217;s Nwfilter Driver]]></title>
    <link href="http://andyregan.net/firewalling-bridged-vms-using-libvirts-nwfilter-driver/"/>
    <updated>2010-11-19T00:00:00+00:00</updated>
    <id>http://andyregan.net/firewalling-bridged-vms-using-libvirts-nwfilter-driver</id>
    <content type="html"><![CDATA[<p><a href="http://libvirt.org/"><img class="center" src="http://libvirt.org/libvirtLogo.png" width="200" title="libvirt logo" ></a></p>

<p>Recently, I needed to create a virtual machine to host an internet-facing web application. One of the
requirements for this VM included setting up a firewall on the VM's host as well as on the guest itself
to provide an added layer of security.</p>

<p>Versions of <a href="http://libvirt.org/">libvirt</a> since 8.0 include the nwfilter driver. This driver allows you to define simple
network filtering rules in XML. Libvirt can then translate your rules to iptables/ebtables. More
information and examples are available at the <a href="http://libvirt.org/firewall.html">Libvirt Firewall Documentation</a> page.</p>

<p>It's worth noting that while I found my nwfilter rules worked on Debian Squeeze (unstable), they did
not work on Debian Lenny. Even though I had upgraded libvirt to a more recent version from backports,
it's likely that newer versions of dependent packages, such as iptables, are required also.</p>

<p>Another potential gotcha is described in the libvirt documentation:</p>

<p><blockquote><p>Finally, in terms of problems we have in deployment. The biggest problem is that if the admin does<br/>service iptables restart all our work gets blown away. Weâ€™ve experimented with using lokkit to<br/>record our custom rules in a persistent config file, but that caused different problem. Admins who<br/>were not using lokkit for their config found that all their own rules got blown away. So we threw<br/>away our lokkit code. Instead we document that if you run service iptables restart, you need to<br/>send SIGHUP to libvirt to make it recreate its rules.</p></blockquote></p>

<p>Unfortunately, there appears to be a <a href="http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=602428">bug</a> in the current version of libvirt-bin on Squeeze
(0.8.3-3) that causes the libvirt daemon to crash when you try to reload. This has been fixed
upstream. While waiting for next Debian Squeeze release of libvirt-bin, you can use the following
trick should iptables be restarted.</p>

<p>Simply, run <code>$virsh nwfilter-edit your-custom-template.xml</code> . Add a newline to the end of your XML
and save. Virsh will re-create your defined rules.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lack of Entropy on Virtual Machine]]></title>
    <link href="http://andyregan.net/lack-of-entropy-on-virtual-machine/"/>
    <updated>2010-07-27T00:00:00+01:00</updated>
    <id>http://andyregan.net/lack-of-entropy-on-virtual-machine</id>
    <content type="html"><![CDATA[<p>If you are generating <a href="http://www.gnupg.org/">GPG keys</a> on a virtual machine, you may encounter the following error.</p>

<p><code>Not enough random bytes available. Please do some other work to give the OS a chance to collect more entropy!</code></p>

<p>Operating systems generate randomness based on hardware input. This randomness is collected for
use in applications which require random data (such as cryptographic applications). However, a virtual OS
does not have the same level of access to real hardware. As a result, the usual source of randomness
expected by the operating system is not available. The measure of randomness currently available (entropy)
can be viewed by running</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>entropy in linux </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>cat /proc/sys/kernel/random/entropy_avail
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>If the entropy pool drains, <strong>/dev/random</strong> will block until additional entropy is collected. One solution
is to use <strong>/dev/urandom</strong> as a source. This will not block, but will produce lower quality randomness.
You can use <strong>/dev/urandom</strong> by installing <a href="http://packages.debian.org/lenny/rng-tools">rng-tools</a> and adding the following to <strong>/etc/default/rng-tools</strong>.
Save and then restart rng-tools.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>/etc/default/rng-tools </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">HRNGDEVICE</span><span class="o">=</span>/dev/urandom
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Unfortunately, using <strong>/dev/urandom</strong> is not suitable for my security requirements. A better solution
would be to use a hardware entropy generator as described in <a href="http://strugglers.net/~andy/blog/2010/06/06/adventures-in-entropy-part-1/">Andy Smith's excellent post</a> .</p>

<p>As a short-term work-around, I decided to generate keys on a physical host with a good quality source of
randomness and then <a href="http://www.debuntu.org/how-to-import-export-gpg-key-pair">import</a> them on the remote host.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Recovering Files From an Unmountable USB Key]]></title>
    <link href="http://andyregan.net/recovering-files-from-an-unmountable-usb-key/"/>
    <updated>2009-02-28T00:00:00+00:00</updated>
    <id>http://andyregan.net/recovering-files-from-an-unmountable-usb-key</id>
    <content type="html"><![CDATA[<p>The other night, myself and Rory managed to recover his friend's thesis from a wonky USB thumb drive. We used <a href="http://www.cgsecurity.org/wiki/PhotoRec">PhotoRec</a> on Ubuntu Linux.
PhotoRec comes with the TestDisk utility. You can install TestDisk via:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$apt</span>-get update
</span><span class='line'><span class="nv">$apt</span>-get install testdisk
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The first thing we did was run <strong>dmesg</strong> in a terminal to get a bit of info on what was going on. We ran dmesg before and after we plugged
in the drive and noted the relevant output. The device eventually settled and was given the device location sdb by the kernel, but no
filesystem was found.
The partition was likely corrupted somehow.</p>

<p>TestDisk could be used to try to repair the partition on the disk, but it could also damage the data further. We decided to make an image to work with using <strong>dd</strong>:</p>

<p><strong>Use dd with care! Consult the man page for more info.</strong>
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$sudo</span> dd <span class="k">if</span><span class="o">=</span>/dev/sdb <span class="nv">ou</span><span class="o">=</span>./disk_image
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>This copied the contents of the usb key block-by-block to a file called "disk_image". The was a 2G image (the total capacity) of the wonky drive.</p>

<p>We then used <strong>photorec</strong> to try to recover any files from the image.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$photorec</span> ./disk_image
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Select the image to use.</p>

<p><img src="/images/posts/recovering-files-from-an-unmountable-usb-key/photorec1.png" title="Select the image to use" ></p>

<p>Select the partition type.</p>

<p><img src="/images/posts/recovering-files-from-an-unmountable-usb-key/photorec2.png" title="Select the partition type" ></p>

<p>Select the partition.</p>

<p><img src="/images/posts/recovering-files-from-an-unmountable-usb-key/photorec3.png" title="Select the partition" ></p>

<p>Select the filesystem type.</p>

<p><img src="/images/posts/recovering-files-from-an-unmountable-usb-key/photorec4.png" title="Select the filesystem type" ></p>

<p>Select where to save the recovered files.</p>

<p><img src="/images/posts/recovering-files-from-an-unmountable-usb-key/photorec5.png" title="Select where to save the recoverd files" ></p>

<p>Watch the search in progress.</p>

<p><img src="/images/posts/recovering-files-from-an-unmountable-usb-key/photorec6.png" title="Search in progress" ></p>

<p>Et voila! PhotoRec worked its magic and we recovered the thesis, along with all the other files.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Webcam Motion Detection in Ubuntu Linux]]></title>
    <link href="http://andyregan.net/webcam-motion-detection-in-ubuntu-linux/"/>
    <updated>2009-02-26T00:00:00+00:00</updated>
    <id>http://andyregan.net/webcam-motion-detection-in-ubuntu-linux</id>
    <content type="html"><![CDATA[<p>I bought a cheap usb webcam to add to the list of devices for my fyp. The idea is to push presence updates when motion is detected. I'll be using <a href="http://www.lavrsen.dk/twiki/bin/view/Motion/WebHome">Motion</a> to handle motion detection.
Detailed <a href="http://infectedproject.com/2008/04/11/how-to-part-1-cheap-ubuntu-based-home-security/">installation and configuration instructions</a> can be found at InfectedProject.</p>

<p>You can set motion to run commands when certain events happen, such as an image is saved or a movie ends. For example, you could add the following to <strong>/etc/motion/motion.conf</strong> so that you get an email to you're email account when a movie ends.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>montion config </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;Command to be executed when a movie file <span class="o">(</span>.mpg|.avi<span class="o">)</span> is closed. <span class="o">(</span>default: none<span class="o">)</span>&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;To give the filename as an argument to a <span class="nb">command </span>append it with %f&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;on_movie_end <span class="nb">echo</span> %f | mutt -s <span class="s2">&quot;[Motion]&quot;</span> -a %f joe@bloggs.com
</span></code></pre></td></tr></table></div></figure></notextile></div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Installing Subclipse in Ubuntu Behind a Proxy]]></title>
    <link href="http://andyregan.net/installing-subclipse-in-ubuntu-behind-a-proxy/"/>
    <updated>2009-02-25T00:00:00+00:00</updated>
    <id>http://andyregan.net/installing-subclipse-in-ubuntu-behind-a-proxy</id>
    <content type="html"><![CDATA[<p>Took me ages to figure this out. I followed these <a href="https://help.ubuntu.com/community/EclipseSubversion">instructions on how to install Subclise</a>. After I added the remote site and hit "Finish" the installer just timed out. I was working behind a firewall (IT LABS!) so I figured proxy settings had something to do with my problems.</p>

<p>Long story short, Eclipse doesn't use your global proxy settings. In Ubuntu, the location of the settings in Eclipse is <strong>Window->Preferences->Install &amp; Update</strong>.</p>

<p>From there, you can specify your proxy host and port and successfully install <a href="http://subclipse.tigris.org/">Subclipse</a>.</p>

<p>Subclipse is a Subversion plugin for eclipse. Thanks to Nathan for helping me find the settings!</p>
]]></content>
  </entry>
  
</feed>

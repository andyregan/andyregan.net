<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Linux | $whois andyregan]]></title>
  <link href="http://andyregan.net/blog/categories/linux/atom.xml" rel="self"/>
  <link href="http://andyregan.net/"/>
  <updated>2013-01-09T19:11:50+00:00</updated>
  <id>http://andyregan.net/</id>
  <author>
    <name><![CDATA[Andrew Regan]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Specifying GPU Compute Mode At Job Submission with Torque]]></title>
    <link href="http://andyregan.net/specifying-gpu-compute-mode-at-job-submission-with-torque/"/>
    <updated>2011-07-10T00:00:00+01:00</updated>
    <id>http://andyregan.net/specifying-gpu-compute-mode-at-job-submission-with-torque</id>
    <content type="html"><![CDATA[<p>In Torque 2.5.6, 3.0.2 and later, you can specify GPU compute mode and reset GPU ECC error counts at job submission
(provided that you have configured Torque with the <strong>enable-nvidia-gpus</strong> option).</p>

<p>For CUDA 4.0 (Nvidia 270.x drivers), there are four compute modes that can be set on the GPU.</p>

<ol>
<li><strong>Default</strong> : Multiple threads can run on this GPU</li>
<li><strong>Exclusive Thread</strong> : Only one thread in one process can run on this GPU</li>
<li><strong>Prohibited</strong> : No threads are allowed to run on this GPU</li>
<li><strong>Exclusive Process</strong> : Many threads in one process will be able to run on this GPU</li>
</ol>


<p>With Torque, you can now request <strong>Default</strong>, <strong>Exclusive Thread</strong> or <strong>Exclusive Process</strong> compute modes at job
submission time. The mode you specify applies to all the GPUs you request. If you do not specify a compute mode,
then Torque will set the GPUs to <strong>Exclusive Thread</strong>.</p>

<p>For example, to request 1 GPU and with compute mode set to <strong>Exclusive Process</strong> you could define the following resource:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>qsub -l <span class="nv">nodes</span><span class="o">=</span>1:gpus<span class="o">=</span>1:exclusive_process
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>To request 1 GPU with compute mode set to <strong>Exclusive Thread</strong> and reset the ECC error counts on the GPU, you could define the following:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>qsub -l <span class="nv">nodes</span><span class="o">=</span>1:gpus<span class="o">=</span>1:reseterr:exclusive_thread
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The below table shows the various modes and their associated Torque keywords.</p>

<table>
<thead>
<tr>
<th></th>
<th> Compute Mode      </th>
<th> Keyword           </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td> Default           </td>
<td> shared            </td>
</tr>
<tr>
<td></td>
<td> Exclusive Thread  </td>
<td> exclusive_thread  </td>
</tr>
<tr>
<td></td>
<td> Exclusive Process </td>
<td> exclusive_process </td>
</tr>
</tbody>
</table>


<p>More information is available in <a href="http://www.adaptivecomputing.com/resources/docs/torque/3.7schedulinggpus.php">Section 3.7 of the Torque Documentation</a>.</p>

<p>Al Taufer from Adaptive Computing helpfully explained the reasoning behind the <em>shared</em> keyword in <a href="http://www.supercluster.org/pipermail/torqueusers/2011-June/013079.html">reply to a question I submitted to the Torque Users mailing list</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Libvirt + KVM : Booting From An ISO Image]]></title>
    <link href="http://andyregan.net/libvirt-kvm-booting-from-an-iso-image/"/>
    <updated>2011-06-16T00:00:00+01:00</updated>
    <id>http://andyregan.net/libvirt-kvm-booting-from-an-iso-image</id>
    <content type="html"><![CDATA[<p><img class="center" src="http://libvirt.org/libvirtLogo.png" width="200" title="libvirt logo" ></p>

<p>If you want to boot your domain from a CDROM (for example, if you wish to re-install the OS on the VM),
you can edit its configuration so that it boots from an ISO image on the host.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>host:~# virsh edit name_of_domain
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Within the <strong>os</strong> section, add a <strong>cdrom</strong> device. Make sure that it is placed before other boot devices, such as disks.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&lt;os&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;...
</span><span class='line'>&amp;lt;boot <span class="nv">dev</span><span class="o">=</span><span class="s1">&#39;cdrom&#39;</span>/&amp;gt;
</span><span class='line'>&amp;lt;boot <span class="nv">dev</span><span class="o">=</span><span class="s1">&#39;hd&#39;</span>/&amp;gt;
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;&lt;/os&gt;
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Add an entry for a cdrom device (or edit an existing cdrom device) such that the <strong>type</strong> is <em>file</em> and the <strong>source</strong>
is the path to the ISO image on the host.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&lt;disk <span class="nb">type</span><span class="o">=</span><span class="s1">&#39;file&#39;</span> <span class="nv">device</span><span class="o">=</span><span class="s1">&#39;cdrom&#39;</span>&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;  &amp;lt;source <span class="nv">file</span><span class="o">=</span><span class="s1">&#39;/path/to/install_media.iso&#39;</span>/&amp;gt;
</span><span class='line'>   ...
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;&lt;/disk&gt;
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Save your changes and then reboot the domain. It should have booted into the ISO image. You can then attach a console
and continue the installation.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>host:~# virt-viewer name_of_domain
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>Edit</h2>

<p>I forgot (of course!) that you must undo the above changes after installation. Otherwise, it will continue to boot
into the ISO and not your shiny new OS.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fixing Git Group Write Errors]]></title>
    <link href="http://andyregan.net/fixing-git-group-write-errors/"/>
    <updated>2011-06-15T00:00:00+01:00</updated>
    <id>http://andyregan.net/fixing-git-group-write-errors</id>
    <content type="html"><![CDATA[<p><img class="center" src="/images/posts/fixing-git-group-write-errors/200px-Git-logo.svg_.png" width="200" title="&#34;200px Git logo&#34;" alt="&#34;200px Git logo&#34;"></p>

<h2>The Problem</h2>

<p>When many users are committing to the same git repository, the correct group permissions must be
set. For example, when a user recently tried to commit to a shared git repository, it failed
with the following error:</p>

<p><blockquote><p>fatal: failed to write object</p></blockquote></p>

<p>Looking at the repository's config file on the server, the <strong>sharedRepository</strong> variable was not set.</p>

<h2>The Fix</h2>

<p>First, I fixed the group permissions for the repository (all the users belonged to the same group).</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>chmod -R g+swX /path/to/repository/
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Then, I set the <strong>sharedRepository</strong> variable to <em>true</em>.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">cd</span> /path/to/repository/
</span><span class='line'><span class="nv">$ </span>git repo-config core.sharedRepository <span class="nb">true</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>More Info</h2>

<p>More information on this variable can be found in the git-config man page.</p>

<p><blockquote><p>core.sharedRepository<br/><br/>When group (or true), the repository is made shareable between several users in a group (making sure all the files and objects are group-writable). When all (or world or everybody), the<br/><br/>repository will be readable by all users, additionally to being group-shareable. When umask (or false), git will use permissions reported by umask(2). When 0xxx, where 0xxx is an octal<br/><br/>number, files in the repository will have this mode value. 0xxx will override user´s umask value, and thus, users with a safe umask (0077) can use this option. Examples: 0660 is equivalent<br/><br/>to group. 0640 is a repository that is group-readable but not group-writable. See git-init(1). False by default.</p></blockquote></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Allowing Debian Packages To Execute Scripts When Upgrading]]></title>
    <link href="http://andyregan.net/allowing-debian-packages-to-execute-scripts-when-upgrading/"/>
    <updated>2011-02-07T00:00:00+00:00</updated>
    <id>http://andyregan.net/allowing-debian-packages-to-execute-scripts-when-upgrading</id>
    <content type="html"><![CDATA[<p>As <a href="http://www.ichec.ie/about_us/david_delaharpegolden">David</a> came across this morning, some <a href="http://www.debian.org/">Debian</a> packages try to execute scripts in <strong>/tmp</strong>
during upgrade. Often <strong>/tmp</strong> is mounted <strong>noexec</strong> for security and this can cause upgrades to
fail. Files in partitions mounted <strong>noexec</strong> cannot be executed.</p>

<p>To complete the upgrades you can temporarily mount <strong>/tmp</strong> with <strong>exec</strong>, upgrade your packages
and then remount as per the <strong>noexec</strong> flag in your <strong>/etc/fstab</strong>.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>mount -o remount,exec /tmp
</span><span class='line'><span class="nv">$ </span>aptitude safe-upgrade
</span><span class='line'><span class="nv">$ </span>mount -o remount /tmp
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>You can also <a href="http://wiki.mediatemple.net/w/%28ve%29:Configure_apt">change the default tmp directory that apt uses</a>.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">echo</span> <span class="s2">&quot;APT::ExtractTemplates::TempDir \&quot;/var/local/tmp\&quot;;&quot;</span> &gt;&gt; /etc/apt/apt.conf.d/50extracttemplates
</span><span class='line'><span class="nv">$ </span>mkdir /var/local/tmp/
</span></code></pre></td></tr></table></div></figure></notextile></div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Use SSH Tunneling to Access A Subversion Server Behind NAT]]></title>
    <link href="http://andyregan.net/how-to-use-ssh-tunneling-to-access-a-subversion-server-behind-nat/"/>
    <updated>2011-02-04T00:00:00+00:00</updated>
    <id>http://andyregan.net/how-to-use-ssh-tunneling-to-access-a-subversion-server-behind-nat</id>
    <content type="html"><![CDATA[<h2>Now why would I want to do that?</h2>

<p>Let's say that you have a subversion repository hosted on a PC in your office. It cannot be
accessed directly from the outside world because it is behind NAT.</p>

<p>If you can't connect to a VPN or forward ports, but you <strong>can</strong> SSH from the server hosting
your repository to the client that will access the repository, then your could try using a
reverse SSH tunnel.</p>

<h2>Example</h2>

<p>In the following example, I'm assuming that both the server hosting the subversion repository
and the client trying to access the repository are running either a Linux distro or OS X. I'm
also assuming that you are accessing the repository using svn+ssh and that openssh (or
similar) is installed on both the client and server. (That's a lot of assumptions!)</p>

<p>For the sake of simplicity, I'll call the subversion server <strong>host-a</strong> and the client <strong>host-b</strong>.</p>

<h3>On Host-A</h3>

<p>Since you can SSH from host-a to host-b, the first thing you'll need to do is create a reverse
SHH tunnel. Run the following command in a terminal on host-a where <strong>username</strong> is a valid
username on host-b.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>ssh -fN -R 3022:localhost:22 username@host-b
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>This will prompt you to enter your account password on host-b and will open a new reverse
tunnel in the background. You can confirm that the tunnel is active using the ps command.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">[</span>host-a<span class="o">]</span><span class="nv">$ </span>ps aux | grep 3022:
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>On Host-B</h3>

<p>Next, (from any host) log into your account on host-b . Using the following command, you
should see that host-b is listening for incoming connections on port 3022.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">[</span>host-b<span class="o">]</span><span class="nv">$netstat</span> -aln | grep 3022
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Now edit the file at <code>~/.subversion/config</code> so that the following line is under the <code>[tunnels]</code>
section:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>~/.subversion/config </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">[</span>tunnels<span class="o">]</span>
</span><span class='line'><span class="nv">sshtunnel</span> <span class="o">=</span> ssh -p 3022
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>You can then check out your repository from host-a with the following command where <strong>username</strong> is
your username on host-a.
<strong>(Note that the tunnel you opened from the subversion server must be still open)</strong></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>svn co svn+sshtunnel://username@localhost/path/to/svn/repository /path/to/local/copy
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Once you've initially checked out the repository, you can add files, commit and update as you
normally would (as long as the ssh tunnel is still open from host-a).</p>

<h3>Horrible Attempt At A Helpful Diagram</h3>

<p>Sorry folks!</p>

<p><img class="center" src="/images/posts/how-to-use-ssh-tunneling-to-access-a-subversion-server-behind-nat/tunnel_example.png" title="ssh tunnel example" alt="ssh tunnel example"></p>

<h3>What do I need to do if I'm using git and not subversion?</h3>

<p>Glad you asked. You'll need to add the following to <code>~/.ssh/config</code> on host-b.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>~/.ssh/config </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Host host-a
</span><span class='line'>HostName localhost
</span><span class='line'>Port 3022
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Then you can just use use <code>[host-b]$ssh username@host-a</code> instead of <code>[host-b]$ssh -p 3022 localhost</code> .</p>

<p>So to clone the repository om host-a:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">[</span>host-b<span class="o">]</span>git clone git+ssh://host-a/path/to/repo /path/to/local/clone
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>Resources</h3>

<p>The following links contain more reverse tunnel tricks.</p>

<ul>
<li>http://www.marksanborn.net/howto/bypass-firewall-and-nat-with-reverse-ssh-tunnel/</li>
<li>http://rhnotebook.wordpress.com/2010/02/13/reverse-ssh-port-forwarding-t-o-i-c-o-r-g/</li>
</ul>

]]></content>
  </entry>
  
</feed>
